#!/bin/bash
set -a
VERSION=1.8
DATE=2011-07-11

USAGE="rsync-incr [options] N sourcedir destdir
rsync-incr is a wrapper shell script around rsync to perform automated,
unattended, incremental, disk to disk backups, automatically removing old
backups to make room for new ones. It produces standard mirror copies
browsable and restorable without specific tools.
(c) Colas Nahaboo, http://colas.nahaboo.net, GNU General Public License
Version $VERSION, $DATE
See documentation at http://colas.nahaboo.net/Software/RsyncIncr
"

# -H optional
rsync="rsync -Sa --delete --force"
shopt -s nullglob
export RSYNC_RSH="${RSYNC_RSH:-ssh}" # for 2.6.3, where ssh is the default
EXT=past
pbsm=10

#------------------------------------------------------------------ options
option_n=0;snapshot=false;hardlinks="-H";do_gzip=false;global_remove=false
only_clean=false
declare -a options
no_cross_devs=true
while test -z "${1##-*}" -a -n "$1";do case "$1" in
  --snap) snapshot=true;; --nohl) hardlinks=;; --cbf)do_gzip=true;;
  --grem) global_remove=true;;
  --pbsm=*) pbsm="${1##*=}";;
  --cross-devs) no_cross_devs=false;;
  --clean) only_clean=true;;
  *) options[options_n]="$1"; let options_n++;;
esac;shift;done

n="${1%[mM]}"; source="${2%%/}"; dest="${3%%/}"
if test "$n" = "$1"; then checkspace=false;else checkspace=true; fi
if test "$#" != 3; then 
   echo "$USAGE";exit 1;fi
if let 'n<=1'; then echo "$USAGE
N must be > 1";exit 1;fi
if $no_cross_devs; then options[options_n]="-x"; let options_n++; fi

#------------------------------------------------------------------ utils
fsof () { df -P "$1" |tail -1|cut -f 1 -d ' '; }
rootof () { df -P "$1" |tail -1 |sed -e 's/^[^%]*% *//'; }
find_ld () { find `rootof "$1"` -xdev -name LAST_DATE -type f; }
dfof () { df -mP "$1" |tail -1|awk '{print $4}'; }
remdir () { 
  local empty=/tmp/empty-dir-for-rsync.$LOGNAME
  if test -n "$1"; then echo -n "Only $1 M free, "; fi
  echo "Removing old backup: $2"
  # fast rm ,see https://unix.stackexchange.com/questions/106133/why-is-rm-slow
  mkdir -p /tmp/$empty
  rsync -a --delete empty/ "$2"/
  rm -rf "$2"; 
}

# list all old backups on filesystem, one per line, oldest first
backup_siblings () {
  local fs=`fsof "$1"` ld d b
  echo "$RSYNCINCR_LASTDATES" | while read ld; do
    if test `fsof "$ld"` = $fs; then
      d="${ld%/*}"
      ls -1 "$d" | while read b;do
	case "$b" in [0-9][0-9][0-9][0-9]-[01][0-9]-[0-3][0-9][.:][0-2][0-9][h:][0-6][0-9][-:]*) echo "$b $d/$b";;
	esac
      done
    fi
  done | sort | cut -f 2 -d ' '
}

#--------------------------------------------------------- clean old backups
case "$dest" in /*)destold="$dest.$EXT";;*)destold="$PWD/$dest.$EXT";; esac
mkdir -p "$dest" "$destold"
if test -d "$destold"; then
  if $checkspace; then # remove old versions till we have space
    for i in "$destold/"[0-9]*; do  # take max of N and past backups
      case "$i" in *[0-9]m) psize="${i##*-}";psize="${psize%m}"
        case pbsm in 
	  *m) let "psize += ${pbsm%m}";;
	  *)  let "psize = (psize*(100 + $pbsm))/100";;
        esac
        if let 'psize>n'; then n=$psize; fi
      ;; esac
    done
    echo "Ensuring we have at least $n M free"
    if $global_remove; then # filesystem-global remove
      if test -z "$RSYNCINCR_LASTDATES"; then # slow default, always work
	RSYNCINCR_LASTDATES=`find_ld "$destold"`
      fi
      freespace=`dfof "$destold"`
      if let 'freespace<n'; then
	backup_siblings "$destold" | while read f; do
	  freespace=`dfof "$destold"`
	  if let 'freespace>=n'; then break; else remdir "$freespace" "$f"; fi
        done
      fi
    else # just remove in dest dir
      for f in "$destold/"[0-9]*; do
	freespace=`dfof "$destold"`
	if let 'freespace>=n'; then break; else remdir "$freespace" "$f"; fi
      done
    fi
    echo "Free space is $freespace M, ok"
  else				# remove more than N backups
    p=1
    for f in `for i in "$destold/"[0-9]*; do echo "$i";done|tac`; do
      if let 'p>=n'; then remdir '' "$f"; fi; let p++
    done
  fi
fi

if $only_clean; then exit; fi
#------------------------------------------------------------ perform backup
if test -e "$destold/LAST_DATE";then last_date=`cat "$destold/LAST_DATE"`;fi
if test -z "$last_date"; then last_date=`date -d '-1 sec' +'%Y-%m-%d.%Hh%M'`; fi

status=0
if $snapshot; then		# full snapshot style
  if test -d "$dest" -a ! -e "$destold/$last_date"; then 
    mv "$dest" "$destold/$last_date"
  fi
  $rsync "${options[@]}" --link-dest="$destold/$last_date" "$source"/ "$dest/"
  status=$?
  if test -d "$destold/$last_date"; then
    # size: we must find block size and add the rounded sizes of non-link files
    nb=$(dumpe2fs `df -P "$destold"|tail -1|(read d r;echo $d)` 2>&1|grep 'Block size:' |(read l1 l2  b;let b=b/512;echo $b) )
    if let 'nb<=0'; then nb=2;fi
    size=$(find "$destold/$last_date" -type d -o \( -type f -links 1 \) -printf '%b\n'|(t=0;while read d;do let t='t+((d+(nb-1))/nb)*nb';done;let tk=t/2;echo $tk) )
    if $do_gzip; then gzip -9 -r "$destold/$last_date"; fi
  fi
else				# just archive copy of changed files
  # the grep is a fix for rsync 2.6.2+ bug
  $rsync $hardlinks \
    "${options[@]}" --backup --backup-dir="$destold/$last_date" \
    "$source"/ "$dest/" |\
    grep -v '^rsync: mkdir ".*" failed: File exists [(]17[)]' 
  status=${PIPESTATUS[0]}
  if test -d "$destold/$last_date"; then 
    size=`du -ks "$destold/$last_date"|(read s r;echo $s)`
    if $do_gzip; then gzip -9 -r "$destold/$last_date"; fi
  fi
fi
if test -e "$destold/$last_date"; then 
  let msize='(size+1023)/1024'
  mv "$destold/$last_date" "$destold/$last_date-${msize}m"
fi
date +'%Y-%m-%d.%Hh%M' >"$destold/LAST_DATE"
if test "$status" = 0 -o "$status" = 24; then
  exit 0
else
  echo "*** ERROR: rsync returned code $status" 1>&2
  exit $status
fi
